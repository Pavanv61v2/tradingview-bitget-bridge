name: TradingView-Bitget Bridge
'on':
  repository_dispatch:
    types:
      - trading-signal
jobs:
  place-order:
    runs-on: ubuntu-latest
    steps:
      - name: Process Trading Signal
        env:
          BITGET_API_KEY: '${{ secrets.BITGET_API_KEY }}'
          BITGET_API_SECRET: '${{ secrets.BITGET_API_SECRET }}'
          BITGET_PASSPHRASE: '${{ secrets.BITGET_PASSPHRASE }}'
          SIGNAL_DATA: '${{ toJson(github.event.client_payload) }}'
          NOTIFICATIONS_ENABLED: 'true'
          NOTIFICATION_EMAIL: '${{ secrets.NOTIFICATION_EMAIL }}'
        run: >
          echo "Received trading signal"

          echo "Symbol: ${{ github.event.client_payload.symbol }}"

          echo "Action: ${{ github.event.client_payload.action }}"

          echo "Order size: ${{ github.event.client_payload.order_size }}"


          # Install dependencies

          npm install axios crypto-js nodemailer


          # Create and run the trading script

          cat > trade.js << 'EOF'

          const axios = require('axios');

          const crypto = require('crypto');

          const nodemailer = require('nodemailer');

          const fs = require('fs');


          // Common scale (decimal places) for cryptocurrencies

          const coinScales = {
            'BTC': 6,
            'ETH': 5,
            'SOL': 4,
            'XRP': 2,
            'ADA': 2,
            'DOT': 3,
            'DOGE': 2,
            'SHIB': 0,
            // Default scale for others
            'DEFAULT': 4
          };


          // Trade log file

          const TRADE_LOG_FILE = 'trade_history.json';


          // Notification settings

          const NOTIFICATIONS_ENABLED = process.env.NOTIFICATIONS_ENABLED ===
          'true';

          const NOTIFICATION_EMAIL = process.env.NOTIFICATION_EMAIL;


          async function placeOrder() {
            try {
              const apiKey = process.env.BITGET_API_KEY;
              const apiSecret = process.env.BITGET_API_SECRET;
              const passphrase = process.env.BITGET_PASSPHRASE;
              const signal = JSON.parse(process.env.SIGNAL_DATA);
              
              console.log("Processing signal:", signal);
              
              // Format symbol
              let symbol = signal.symbol || signal.ticker;
              symbol = symbol.replace('/', '').toUpperCase();
              if (symbol.endsWith('USD') && !symbol.endsWith('USDT')) {
                symbol = symbol.replace('USD', 'USDT');
              }
              
              // Extract base coin name
              const baseCoin = symbol.replace('USDT', '');
              
              // Determine if this is a buy or sell order
              const isBuy = signal.action.toLowerCase() === 'buy';
              
              let orderSize;
              let originalAmount;
              
              if (isBuy) {
                // BUY ORDER: Use the order_size directly as USDT amount
                // For market buy, size is the amount of USDT to spend
                
                // Get the specified order size (in USDT)
                let investmentAmount = 100; // Default amount in USDT
                
                if (signal.order_size && !isNaN(parseFloat(signal.order_size))) {
                  investmentAmount = parseFloat(signal.order_size);
                }
                
                originalAmount = investmentAmount;
                
                // For USDT, we use 2 decimal places
                orderSize = investmentAmount.toFixed(2);
                console.log(`Buy order: Using ${orderSize} USDT to buy ${symbol}`);
                
              } else {
                // SELL ORDER: Get current position and sell 100% of it
                // For market sell, size is the amount of base currency (e.g., BTC) to sell
                
                // Get current position for the symbol
                const position = await getAccountAssets(symbol);
                
                if (position && position.available && parseFloat(position.available) > 0) {
                  // Get the appropriate decimal scale for this coin
                  const scale = coinScales[baseCoin] || coinScales['DEFAULT'];
                  
                  // Get the available amount
                  const availableAmount = parseFloat(position.available);
                  originalAmount = availableAmount;
                  
                  // Handle based on position size
                  if (availableAmount >= 0.1) {
                    // For larger positions: Round down slightly to ensure order goes through
                    const multiplier = Math.pow(10, scale);
                    const roundedDown = Math.floor(availableAmount * multiplier) / multiplier;
                    orderSize = roundedDown.toFixed(scale);
                    console.log(`Selling larger position (rounded down): ${orderSize} ${position.coin} (original: ${position.available})`);
                  } else {
                    // For small "dust-like" positions: Sell 99.5% to ensure order success
                    // This helps with tiny positions where precision matters more
                    const safeAmount = availableAmount * 0.995;
                    orderSize = safeAmount.toFixed(scale);
                    console.log(`Selling small position (99.5%): ${orderSize} ${position.coin} (original: ${position.available})`);
                  }
                } else {
                  const errorMsg = `No position found for ${symbol} or position is empty`;
                  console.error(errorMsg);
                  await sendNotification(
                    `Error: Nothing to Sell - ${symbol}`,
                    `Attempted to sell ${symbol} but no position was found or it was empty.`
                  );
                  throw new Error(errorMsg);
                }
              }
              
              // Create payload according to Bitget API v2
              const payload = {
                symbol: symbol,
                side: isBuy ? 'buy' : 'sell',
                orderType: 'market',
                force: 'gtc',
                size: orderSize
              };
              
              // Add take profit and stop loss if provided
              if (isBuy && signal.takeProfit && !isNaN(parseFloat(signal.takeProfit))) {
                payload.presetTakeProfitPrice = parseFloat(signal.takeProfit).toString();
              }
              
              if (isBuy && signal.stopLoss && !isNaN(parseFloat(signal.stopLoss))) {
                payload.presetStopLossPrice = parseFloat(signal.stopLoss).toString();
              }
              
              console.log("Order payload:", payload);
              
              // Use the API endpoint
              const requestPath = '/api/v2/spot/trade/place-order';
              const method = 'POST';
              const timestamp = Date.now().toString();
              
              // Convert payload to string
              const body = JSON.stringify(payload);
              
              // Signature content: timestamp + method + requestPath + body
              const preHash = timestamp + method.toUpperCase() + requestPath + body;
              console.log("Pre-hash string:", preHash);
              
              // Generate signature using HMAC SHA256 and BASE64 encoding
              const signature = crypto.createHmac('sha256', apiSecret)
                .update(preHash)
                .digest('base64');
              
              console.log("Generated signature (partial):", signature.substring(0, 10) + "...");
              
              // Make the request with retry mechanism
              console.log("Making request to Bitget API...");
              
              // Retry configuration
              const maxRetries = 3;
              let attempts = 0;
              let success = false;
              let lastError = null;
              let response = null;
              
              while (attempts < maxRetries && !success) {
                attempts++;
                try {
                  response = await axios({
                    method: method,
                    url: 'https://api.bitget.com' + requestPath,
                    headers: {
                      'ACCESS-KEY': apiKey,
                      'ACCESS-SIGN': signature,
                      'ACCESS-TIMESTAMP': timestamp,
                      'ACCESS-PASSPHRASE': passphrase,
                      'Content-Type': 'application/json'
                    },
                    data: payload,
                    timeout: 10000
                  });
                  
                  if (response.data && response.data.code === '00000') {
                    success = true;
                  } else {
                    throw new Error(`Bitget error: ${response.data ? response.data.msg : 'Unknown error'}`);
                  }
                } catch (error) {
                  lastError = error;
                  console.error(`Attempt ${attempts}/${maxRetries} failed:`, error.message);
                  if (error.response) {
                    console.error("Error response data:", JSON.stringify(error.response.data, null, 2));
                  }
                  
                  // Wait before retrying (exponential backoff)
                  if (attempts < maxRetries) {
                    const delay = Math.pow(2, attempts) * 1000;
                    console.log(`Retrying in ${delay/1000} seconds...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                  }
                }
              }
              
              if (!success) {
                const errorMsg = `All ${maxRetries} attempts failed: ${lastError.message}`;
                console.error(errorMsg);
                await sendNotification(
                  `Error: Order Failed - ${symbol}`,
                  `Failed to place ${isBuy ? 'buy' : 'sell'} order for ${symbol} after ${maxRetries} attempts.\n\nError: ${lastError.message}`
                );
                throw new Error(errorMsg);
              }
              
              console.log("Order placed successfully!");
              console.log("Bitget API response:", JSON.stringify(response.data, null, 2));
              
              // Log the trade
              const tradeInfo = {
                timestamp: new Date().toISOString(),
                symbol: symbol,
                action: isBuy ? 'buy' : 'sell',
                originalAmount: originalAmount,
                orderSize: orderSize,
                orderId: response.data.data.orderId,
                status: 'success'
              };
              
              await logTrade(tradeInfo);
              
              // Send notification
              if (isBuy) {
                await sendNotification(
                  `Buy Order Executed - ${symbol}`,
                  `Successfully bought ${symbol} with ${orderSize} USDT\n\nOrder ID: ${response.data.data.orderId}`
                );
              } else {
                await sendNotification(
                  `Sell Order Executed - ${symbol}`,
                  `Successfully sold ${orderSize} ${baseCoin}\n\nOrder ID: ${response.data.data.orderId}`
                );
              }
              
              return response.data;
              
            } catch (error) {
              console.error("Error placing order:", error.message);
              // Log the failed trade
              const tradeInfo = {
                timestamp: new Date().toISOString(),
                symbol: error.symbol || 'UNKNOWN',
                action: error.action || 'UNKNOWN',
                status: 'failed',
                error: error.message
              };
              
              await logTrade(tradeInfo);
              
              process.exit(1);
            }
          }


          // Helper function to get account assets

          async function getAccountAssets(symbol) {
            const timestamp = Date.now().toString();
            const requestPath = '/api/v2/spot/account/assets';
            const method = 'GET';
            
            // Signature content: timestamp + method + requestPath
            const preHash = timestamp + method.toUpperCase() + requestPath;
            
            // Generate signature
            const signature = crypto.createHmac('sha256', process.env.BITGET_API_SECRET)
              .update(preHash)
              .digest('base64');
            
            const response = await axios({
              method: method,
              url: 'https://api.bitget.com' + requestPath,
              headers: {
                'ACCESS-KEY': process.env.BITGET_API_KEY,
                'ACCESS-SIGN': signature,
                'ACCESS-TIMESTAMP': timestamp,
                'ACCESS-PASSPHRASE': process.env.BITGET_PASSPHRASE,
                'Content-Type': 'application/json'
              },
              timeout: 10000
            });
            
            if (response.data && response.data.code === '00000') {
              // Find the asset for the specific coin (e.g., BTC for BTCUSDT)
              const baseCoin = symbol.replace('USDT', '');
              const asset = response.data.data.find(a => a.coin === baseCoin);
              console.log(`Account assets for ${baseCoin}:`, asset);
              return asset;
            } else {
              throw new Error(`Failed to get account assets: ${response.data ? response.data.msg : 'Unknown error'}`);
            }
          }


          // Helper function to log trades

          async function logTrade(tradeInfo) {
            try {
              // Check if the log file exists
              let trades = [];
              if (fs.existsSync(TRADE_LOG_FILE)) {
                // Read existing logs
                const data = fs.readFileSync(TRADE_LOG_FILE, 'utf8');
                trades = JSON.parse(data);
              }
              
              // Add the new trade
              trades.push(tradeInfo);
              
              // Write back to file
              fs.writeFileSync(TRADE_LOG_FILE, JSON.stringify(trades, null, 2));
              console.log("Trade logged successfully");
            } catch (error) {
              console.error("Error logging trade:", error.message);
            }
          }


          // Helper function to send email notifications

          async function sendNotification(subject, body) {
            if (!NOTIFICATIONS_ENABLED || !NOTIFICATION_EMAIL) {
              console.log("Notifications disabled or email not configured");
              return;
            }
            
            try {
              // Using GitHub Actions to create a notification issue instead of email
              // This is a workaround since we can't easily send emails from GitHub Actions
              
              // Print the notification to the log
              console.log("==== NOTIFICATION ====");
              console.log("Subject:", subject);
              console.log("Body:", body);
              console.log("======================");
              
              // In a real-world scenario, you would use nodemailer to send an email here
              // But for the GitHub Actions environment, we'll skip actual email sending
              // and just log the notification
            } catch (error) {
              console.error("Error sending notification:", error.message);
            }
          }


          // Execute the function

          placeOrder();

          EOF


          node trade.js
      - name: Commit updated trade history
        if: success()
        run: |
          # Configure git
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          # Check if trade_history.json was created/updated
          if [ -f "trade_history.json" ]; then
            # Add and commit the file
            git add trade_history.json
            git commit -m "Update trade history from latest trade" || echo "No changes to commit"
            
            # Push changes back to repository
            git push || echo "Nothing to push"
          else
            echo "No trade_history.json file found to commit"
          fi

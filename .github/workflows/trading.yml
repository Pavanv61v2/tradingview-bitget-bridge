name: TradingView-Bitget Bridge

on:
  repository_dispatch:
    types: [trading-signal]

jobs:
  place-order:
    runs-on: ubuntu-latest
    steps:
      - name: Process Trading Signal
        env:
          BITGET_API_KEY: ${{ secrets.BITGET_API_KEY }}
          BITGET_API_SECRET: ${{ secrets.BITGET_API_SECRET }}
          BITGET_PASSPHRASE: ${{ secrets.BITGET_PASSPHRASE }}
          SIGNAL_DATA: ${{ toJson(github.event.client_payload) }}
        run: |
          echo "Received trading signal"
          echo "Symbol: ${{ github.event.client_payload.symbol }}"
          echo "Action: ${{ github.event.client_payload.action }}"
          echo "Order size: ${{ github.event.client_payload.order_size }}"
          
          # Install dependencies
          npm install axios crypto-js
          
          # Create and run the trading script
          cat > trade.js << 'EOF'
          const axios = require('axios');
          const crypto = require('crypto');
          
          // Common scale (decimal places) for cryptocurrencies
          const coinScales = {
            'BTC': 6,
            'ETH': 5,
            'SOL': 4,
            'XRP': 2,
            'ADA': 2,
            'DOT': 3,
            'DOGE': 2,
            'SHIB': 0,
            // Default scale for others
            'DEFAULT': 4
          };
          
          async function placeOrder() {
            try {
              const apiKey = process.env.BITGET_API_KEY;
              const apiSecret = process.env.BITGET_API_SECRET;
              const passphrase = process.env.BITGET_PASSPHRASE;
              const signal = JSON.parse(process.env.SIGNAL_DATA);
              
              console.log("Processing signal:", signal);
              
              // Format symbol
              let symbol = signal.symbol || signal.ticker;
              symbol = symbol.replace('/', '').toUpperCase();
              if (symbol.endsWith('USD') && !symbol.endsWith('USDT')) {
                symbol = symbol.replace('USD', 'USDT');
              }
              
              // Extract base coin name
              const baseCoin = symbol.replace('USDT', '');
              
              // Determine if this is a buy or sell order
              const isBuy = signal.action.toLowerCase() === 'buy';
              
              let orderSize;
              
              if (isBuy) {
                // BUY ORDER: Use the order_size directly as USDT amount
                // For market buy, size is the amount of USDT to spend
                
                // Get the specified order size (in USDT)
                let investmentAmount = 100; // Default amount in USDT
                
                if (signal.order_size && !isNaN(parseFloat(signal.order_size))) {
                  investmentAmount = parseFloat(signal.order_size);
                }
                
                // For USDT, we use 2 decimal places
                orderSize = investmentAmount.toFixed(2);
                console.log(`Buy order: Using ${orderSize} USDT to buy ${symbol}`);
                
              } else {
                // SELL ORDER: Get current position and sell 100% of it
                // For market sell, size is the amount of base currency (e.g., BTC) to sell
                
                // Get current position for the symbol
                const position = await getAccountAssets(symbol);
                
                if (position && position.available && parseFloat(position.available) > 0) {
                  // Get the appropriate decimal scale for this coin
                  const scale = coinScales[baseCoin] || coinScales['DEFAULT'];
                  
                  // Get the available amount
                  const availableAmount = parseFloat(position.available);
                  
                  // Handle based on position size
                  if (availableAmount >= 0.1) {
                    // For larger positions: Round down slightly to ensure order goes through
                    const multiplier = Math.pow(10, scale);
                    const roundedDown = Math.floor(availableAmount * multiplier) / multiplier;
                    orderSize = roundedDown.toFixed(scale);
                    console.log(`Selling larger position (rounded down): ${orderSize} ${position.coin} (original: ${position.available})`);
                  } else {
                    // For small "dust-like" positions: Sell 99.5% to ensure order success
                    // This helps with tiny positions where precision matters more
                    const safeAmount = availableAmount * 0.995;
                    orderSize = safeAmount.toFixed(scale);
                    console.log(`Selling small position (99.5%): ${orderSize} ${position.coin} (original: ${position.available})`);
                  }
                } else {
                  throw new Error(`No position found for ${symbol} or position is empty`);
                }
              }
              
              // Create payload according to Bitget API v2
              const payload = {
                symbol: symbol,
                side: isBuy ? 'buy' : 'sell',
                orderType: 'market',
                force: 'gtc',
                size: orderSize
              };
              
              console.log("Order payload:", payload);
              
              // Use the API endpoint
              const requestPath = '/api/v2/spot/trade/place-order';
              const method = 'POST';
              const timestamp = Date.now().toString();
              
              // Convert payload to string
              const body = JSON.stringify(payload);
              
              // Signature content: timestamp + method + requestPath + body
              const preHash = timestamp + method.toUpperCase() + requestPath + body;
              console.log("Pre-hash string:", preHash);
              
              // Generate signature using HMAC SHA256 and BASE64 encoding
              const signature = crypto.createHmac('sha256', apiSecret)
                .update(preHash)
                .digest('base64');
              
              console.log("Generated signature (partial):", signature.substring(0, 10) + "...");
              
              // Make the request
              console.log("Making request to Bitget API...");
              const response = await axios({
                method: method,
                url: 'https://api.bitget.com' + requestPath,
                headers: {
                  'ACCESS-KEY': apiKey,
                  'ACCESS-SIGN': signature,
                  'ACCESS-TIMESTAMP': timestamp,
                  'ACCESS-PASSPHRASE': passphrase,
                  'Content-Type': 'application/json'
                },
                data: payload,
                timeout: 10000
              });
              
              console.log("Bitget API response:", JSON.stringify(response.data, null, 2));
              
              if (response.data && response.data.code === '00000') {
                console.log("Order placed successfully!");
                return;
              } else {
                throw new Error(`Bitget error: ${response.data ? response.data.msg : 'Unknown error'}`);
              }
            } catch (error) {
              console.error("Error placing order:", error.message);
              if (error.response) {
                console.error("Error response data:", JSON.stringify(error.response.data, null, 2));
              }
              process.exit(1);
            }
          }
          
          // Helper function to get account assets
          async function getAccountAssets(symbol) {
            const timestamp = Date.now().toString();
            const requestPath = '/api/v2/spot/account/assets';
            const method = 'GET';
            
            // Signature content: timestamp + method + requestPath
            const preHash = timestamp + method.toUpperCase() + requestPath;
            
            // Generate signature
            const signature = crypto.createHmac('sha256', process.env.BITGET_API_SECRET)
              .update(preHash)
              .digest('base64');
            
            const response = await axios({
              method: method,
              url: 'https://api.bitget.com' + requestPath,
              headers: {
                'ACCESS-KEY': process.env.BITGET_API_KEY,
                'ACCESS-SIGN': signature,
                'ACCESS-TIMESTAMP': timestamp,
                'ACCESS-PASSPHRASE': process.env.BITGET_PASSPHRASE,
                'Content-Type': 'application/json'
              },
              timeout: 10000
            });
            
            if (response.data && response.data.code === '00000') {
              // Find the asset for the specific coin (e.g., BTC for BTCUSDT)
              const baseCoin = symbol.replace('USDT', '');
              const asset = response.data.data.find(a => a.coin === baseCoin);
              console.log(`Account assets for ${baseCoin}:`, asset);
              return asset;
            } else {
              throw new Error(`Failed to get account assets: ${response.data ? response.data.msg : 'Unknown error'}`);
            }
          }
          
          // Execute the function
          placeOrder();
          EOF
          
          node trade.js

name: TradingView-Bitget Bridge
'on':
  repository_dispatch:
    types:
      - trading-signal
  workflow_dispatch: null
jobs:
  place-order:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Process Trading Signal
        env:
          BITGET_API_KEY: '${{ secrets.BITGET_API_KEY }}'
          BITGET_API_SECRET: '${{ secrets.BITGET_API_SECRET }}'
          BITGET_PASSPHRASE: '${{ secrets.BITGET_PASSPHRASE }}'
          SIGNAL_DATA: '${{ toJson(github.event.client_payload) }}'
          NOTIFICATIONS_ENABLED: 'true'
          NOTIFICATION_EMAIL: '${{ secrets.NOTIFICATION_EMAIL }}'
        run: |
          echo "Received trading signal"
          echo "Symbol: ${{ github.event.client_payload.symbol || 'N/A' }}"
          echo "Action: ${{ github.event.client_payload.action || 'N/A' }}"
          echo "Order size: ${{ github.event.client_payload.order_size || 'N/A' }}"
          
          # Install dependencies
          npm install axios crypto-js nodemailer
          
          # Create and run the trading script
          cat > trade.js << 'EOF'
          const axios = require('axios');
          const crypto = require('crypto');
          const nodemailer = require('nodemailer');
          const fs = require('fs');
          
          // Common scale (decimal places) for cryptocurrencies
          const coinScales = {
            'BTC': 6,
            'ETH': 5,
            'SOL': 4,
            'XRP': 2,
            'ADA': 2,
            'DOT': 3,
            'DOGE': 2,
            'SHIB': 0,
            'SUI': 2,
            // Default scale for others
            'DEFAULT': 2
          };
          
          // Trade log file
          const TRADE_LOG_FILE = 'trade_history.json';
          
          // Notification settings
          const NOTIFICATIONS_ENABLED = process.env.NOTIFICATIONS_ENABLED === 'true';
          const NOTIFICATION_EMAIL = process.env.NOTIFICATION_EMAIL;
          
          // Function to fetch precision scale for a specific symbol
          async function getSymbolPrecision(symbol) {
            try {
              console.log(`Fetching precision info for ${symbol}...`);
              const response = await axios({
                method: 'GET',
                url: `https://api.bitget.com/api/v2/spot/public/symbols?symbol=${symbol}`,
                timeout: 5000
              });
              
              if (response.data && response.data.code === '00000' && 
                  response.data.data && response.data.data.length > 0) {
                const symbolInfo = response.data.data[0];
                
                // Extract the base coin and precision
                const baseCoin = symbolInfo.baseCoin;
                const quantityPrecision = parseInt(symbolInfo.quantityPrecision);
                
                console.log(`Precision for ${symbol}: ${quantityPrecision} decimal places`);
                console.log(`Min trade amount: ${symbolInfo.minTradeAmount} ${baseCoin}`);
                
                return quantityPrecision;
              } else {
                console.warn(`Could not get precision for ${symbol}, using fallback`);
                return null;
              }
            } catch (error) {
              console.error(`Error fetching precision for ${symbol}:`, error.message);
              return null;
            }
          }
          
          async function placeOrder() {
            try {
              const apiKey = process.env.BITGET_API_KEY;
              const apiSecret = process.env.BITGET_API_SECRET;
              const passphrase = process.env.BITGET_PASSPHRASE;
              
              // Parse signal data
              let signal;
              try {
                signal = process.env.SIGNAL_DATA ? JSON.parse(process.env.SIGNAL_DATA) : null;
                if (!signal) {
                  throw new Error("No signal data provided");
                }
              } catch(e) {
                console.error("Error parsing signal data:", e.message);
                throw e;
              }
              
              console.log("Processing signal:", signal);
              
              // Format symbol
              let symbol = signal.symbol || signal.ticker;
              if (!symbol) {
                throw new Error("No symbol provided in signal");
              }
              
              symbol = symbol.replace('/', '').toUpperCase();
              if (symbol.endsWith('USD') && !symbol.endsWith('USDT')) {
                symbol = symbol.replace('USD', 'USDT');
              }
              
              // Extract base coin name
              const baseCoin = symbol.replace('USDT', '');
              
              // Determine if this is a buy or sell order
              if (!signal.action) {
                throw new Error("No action (buy/sell) provided in signal");
              }
              
              const isBuy = signal.action.toLowerCase() === 'buy';
              
              // Only fetch precision for the specific symbol being traded
              if (!isBuy) {
                // For sell orders, we need the precision
                const precision = await getSymbolPrecision(symbol);
                if (precision !== null) {
                  // Update the scale in the dictionary
                  coinScales[baseCoin] = precision;
                }
              }
              
              let orderSize;
              let originalAmount;
              
              if (isBuy) {
                // BUY ORDER: Use the order_size directly as USDT amount
                // For market buy, size is the amount of USDT to spend
                
                // Get the specified order size (in USDT)
                let investmentAmount = 100; // Default amount in USDT
                
                if (signal.order_size && !isNaN(parseFloat(signal.order_size))) {
                  investmentAmount = parseFloat(signal.order_size);
                }
                
                originalAmount = investmentAmount;
                
                // For USDT, we use 2 decimal places
                orderSize = investmentAmount.toFixed(2);
                console.log(`Buy order: Using ${orderSize} USDT to buy ${symbol}`);
                
              } else {
                // SELL ORDER: Get current position and sell 100% of it
                // For market sell, size is the amount of base currency (e.g., BTC) to sell
                
                // Get current position for the symbol
                const position = await getAccountAssets(symbol);
                
                // For SELL orders in the placeOrder function:
                if (position && position.available && parseFloat(position.available) > 0) {
                  // Get the appropriate decimal scale for this coin
                  const scale = coinScales[baseCoin] || coinScales['DEFAULT'];
                  console.log(`Using scale ${scale} for ${baseCoin}`);
                  
                  // Get the available amount
                  const availableAmount = parseFloat(position.available);
                  originalAmount = availableAmount;
                  
                  // For BTC and very small amounts, use even more conservative scaling
                  if ((baseCoin === 'BTC' || availableAmount < 0.01) && availableAmount < 0.1) {
                    // For tiny amounts, use 95% to account for any potential rounding or fee issues
                    const safeAmount = availableAmount * 0.95;
                    orderSize = safeAmount.toFixed(scale);
                    console.log(`Selling tiny position (95%): ${orderSize} ${position.coin} (original: ${position.available})`);
                  } else if (availableAmount >= 0.1) {
                    // For larger positions: Round down slightly to ensure order goes through
                    const multiplier = Math.pow(10, scale);
                    const roundedDown = Math.floor(availableAmount * multiplier) / multiplier;
                    // Add extra safety margin for larger values
                    const safeAmount = roundedDown * 0.995;
                    orderSize = safeAmount.toFixed(scale);
                    console.log(`Selling larger position (rounded down): ${orderSize} ${position.coin} (original: ${position.available})`);
                  } else {
                    // For small "dust-like" positions: Sell 98% to ensure order success
                    const safeAmount = availableAmount * 0.98;
                    orderSize = safeAmount.toFixed(scale);
                    console.log(`Selling small position (98%): ${orderSize} ${position.coin} (original: ${position.available})`);
                  }
                  
                  // Validate final order size
                  if (parseFloat(orderSize) <= 0) {
                    throw new Error(`Calculated order size (${orderSize}) is too small to execute.`);
                  }
                } else {
                  const errorMsg = `No position found for ${symbol} or position is empty`;
                  console.error(errorMsg);
                  await sendNotification(
                    `Error: Nothing to Sell - ${symbol}`,
                    `Attempted to sell ${symbol} but no position was found or it was empty.`
                  );
                  throw new Error(errorMsg);
                }
              }
              
              // Create payload according to Bitget API v2
              const payload = {
                symbol: symbol,
                side: isBuy ? 'buy' : 'sell',
                orderType: 'market',
                force: 'gtc',
                size: orderSize
              };
              
              // Add take profit and stop loss if provided
              if (isBuy && signal.takeProfit && !isNaN(parseFloat(signal.takeProfit))) {
                payload.presetTakeProfitPrice = parseFloat(signal.takeProfit).toString();
              }
              
              if (isBuy && signal.stopLoss && !isNaN(parseFloat(signal.stopLoss))) {
                payload.presetStopLossPrice = parseFloat(signal.stopLoss).toString();
              }
              
              console.log("Order payload:", payload);
              
              // Use the API endpoint
              const requestPath = '/api/v2/spot/trade/place-order';
              const method = 'POST';
              const timestamp = Date.now().toString();
              
              // Convert payload to string
              const body = JSON.stringify(payload);
              
              // Signature content: timestamp + method + requestPath + body
              const preHash = timestamp + method.toUpperCase() + requestPath + body;
              
              // Generate signature using HMAC SHA256 and BASE64 encoding
              const signature = crypto.createHmac('sha256', apiSecret)
                .update(preHash)
                .digest('base64');
              
              console.log("Making request to Bitget API...");
              
              // Retry configuration
              const maxRetries = 3;
              let attempts = 0;
              let success = false;
              let lastError = null;
              let response = null;
              
              while (attempts < maxRetries && !success) {
                attempts++;
                try {
                  response = await axios({
                    method: method,
                    url: 'https://api.bitget.com' + requestPath,
                    headers: {
                      'ACCESS-KEY': apiKey,
                      'ACCESS-SIGN': signature,
                      'ACCESS-TIMESTAMP': timestamp,
                      'ACCESS-PASSPHRASE': passphrase,
                      'Content-Type': 'application/json'
                    },
                    data: payload,
                    timeout: 10000
                  });
                  
                  if (response.data && response.data.code === '00000') {
                    success = true;
                  } else {
                    const errorCode = response.data ? response.data.code : 'unknown';
                    const errorMsg = response.data ? response.data.msg : 'Unknown error';
                    
                    // Special handling for common errors
                    if (errorCode === '43012') {
                      throw new Error(`Insufficient balance: The available balance of ${baseCoin} may have changed since checked`);
                    } else if (errorCode === '40808' && errorMsg.includes('checkBDScale')) {
                      throw new Error(`Precision error: ${errorMsg}. Update the coinScales dictionary for ${baseCoin}`);
                    } else {
                      throw new Error(`Bitget error: ${errorMsg} (code: ${errorCode})`);
                    }
                  }
                } catch (error) {
                  lastError = error;
                  console.error(`Attempt ${attempts}/${maxRetries} failed:`, error.message);
                  if (error.response) {
                    console.error("Error response data:", JSON.stringify(error.response.data, null, 2));
                  }
                  
                  // Wait before retrying (exponential backoff)
                  if (attempts < maxRetries) {
                    const delay = Math.pow(2, attempts) * 1000;
                    console.log(`Retrying in ${delay/1000} seconds...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                  }
                }
              }
              
              if (!success) {
                const errorMsg = `All ${maxRetries} attempts failed: ${lastError.message}`;
                console.error(errorMsg);
                await sendNotification(
                  `Error: Order Failed - ${symbol}`,
                  `Failed to place ${isBuy ? 'buy' : 'sell'} order for ${symbol} after ${maxRetries} attempts.\n\nError: ${lastError.message}`
                );
                throw new Error(errorMsg);
              }
              
              console.log("Order placed successfully!");
              console.log("Bitget API response:", JSON.stringify(response.data, null, 2));
              
              // Get the orderId from the response
              const orderId = response.data.data.orderId;
              
              // Wait a moment for the order to process
              console.log("Waiting 2 seconds for order to be processed...");
              await new Promise(resolve => setTimeout(resolve, 2000));
              
              // Fetch order details to get the fill price
              let fillDetails = {
                price: null,
                priceAvg: null,
                baseVolume: null,
                quoteVolume: null,
                status: "processing"
              };
              
              try {
                // Create the request for order details
                const detailsTimestamp = Date.now().toString();
                const requestPath = `/api/v2/spot/trade/orderInfo?orderId=${orderId}`;
                
                // Generate signature for the GET request
                const preHash = detailsTimestamp + 'GET' + requestPath;
                const signature = crypto.createHmac('sha256', apiSecret)
                  .update(preHash)
                  .digest('base64');
                
                console.log("Fetching order details for orderId:", orderId);
                
                const orderDetailsResponse = await axios({
                  method: 'GET',
                  url: 'https://api.bitget.com' + requestPath,
                  headers: {
                    'ACCESS-KEY': apiKey,
                    'ACCESS-SIGN': signature,
                    'ACCESS-TIMESTAMP': detailsTimestamp,
                    'ACCESS-PASSPHRASE': passphrase,
                    'Content-Type': 'application/json'
                  },
                  timeout: 10000
                });
                
                if (orderDetailsResponse.data && orderDetailsResponse.data.code === '00000' && 
                    orderDetailsResponse.data.data && orderDetailsResponse.data.data.length > 0) {
                  
                  const orderData = orderDetailsResponse.data.data[0];
                  
                  // Extract important price information
                  fillDetails = {
                    price: orderData.price || '0',
                    priceAvg: orderData.priceAvg || '0',
                    baseVolume: orderData.baseVolume || '0',
                    quoteVolume: orderData.quoteVolume || '0',
                    status: orderData.status
                  };
                  
                  console.log("Order details fetched successfully:", fillDetails);
                } else {
                  console.warn("Order details response empty or unexpected format:", orderDetailsResponse.data);
                }
              } catch (error) {
                console.error("Error fetching order details:", error.message);
                if (error.response) {
                  console.error("Error response data:", JSON.stringify(error.response.data, null, 2));
                }
              }
              
              // Calculate USDT equivalent based on actual executed values
              let usdtEquivalent = 0;
              if (isBuy) {
                // For buy orders, we use the quote volume (USDT amount)
                usdtEquivalent = parseFloat(fillDetails.quoteVolume || 0);
              } else {
                // For sell orders, we convert base volume to USDT using average price
                const baseAmount = parseFloat(fillDetails.baseVolume || 0);
                const avgPrice = parseFloat(fillDetails.priceAvg || 0);
                usdtEquivalent = baseAmount * avgPrice;
              }
              
              // Log the trade
              const tradeInfo = {
                timestamp: new Date().toISOString(),
                symbol: symbol,
                action: isBuy ? 'buy' : 'sell',
                originalAmount: originalAmount,
                orderSize: orderSize,
                // Use the average execution price
                price: parseFloat(fillDetails.priceAvg) || null,
                // Store actual filled volumes
                filledBaseVolume: parseFloat(fillDetails.baseVolume) || null,
                filledQuoteVolume: parseFloat(fillDetails.quoteVolume) || null,
                // Store USDT equivalent for easy calculations
                usdtEquivalent: usdtEquivalent,
                orderId: orderId,
                status: 'success'
              };
              
              await logTrade(tradeInfo);
              
              // Send notification
              if (isBuy) {
                await sendNotification(
                  `Buy Order Executed - ${symbol}`,
                  `Successfully bought ${fillDetails.baseVolume} ${baseCoin} with ${fillDetails.quoteVolume} USDT\nAvg Price: ${fillDetails.priceAvg} USDT\nOrder ID: ${orderId}`
                );
              } else {
                await sendNotification(
                  `Sell Order Executed - ${symbol}`,
                  `Successfully sold ${fillDetails.baseVolume} ${baseCoin} for ${usdtEquivalent.toFixed(2)} USDT\nAvg Price: ${fillDetails.priceAvg} USDT\nOrder ID: ${orderId}`
                );
              }
              
              return response.data;
              
            } catch (error) {
              console.error("Error placing order:", error.message);
              
              // Define default values in case the error happened early in the function
              let errorSymbol = 'UNKNOWN';
              let errorAction = 'UNKNOWN';
              let errorOrderSize = null;
              let errorOriginalAmount = null;
              
              try {
                // Use the variables if they were already defined in the function
                if (typeof symbol !== 'undefined') {
                  errorSymbol = symbol;
                }
                
                if (typeof isBuy !== 'undefined') {
                  errorAction = isBuy ? 'buy' : 'sell';
                }
                
                if (typeof orderSize !== 'undefined') {
                  errorOrderSize = orderSize;
                }
                
                if (typeof originalAmount !== 'undefined') {
                  errorOriginalAmount = originalAmount;
                }
                
                // If we don't have the values from the function,
                // try to extract them from the signal
                if (errorSymbol === 'UNKNOWN' || errorAction === 'UNKNOWN') {
                  const signal = process.env.SIGNAL_DATA ? JSON.parse(process.env.SIGNAL_DATA) : null;
                  if (signal) {
                    if (errorSymbol === 'UNKNOWN') {
                      let signalSymbol = signal.symbol || signal.ticker || 'UNKNOWN';
                      if (signalSymbol !== 'UNKNOWN') {
                        signalSymbol = signalSymbol.replace('/', '').toUpperCase();
                        if (signalSymbol.endsWith('USD') && !signalSymbol.endsWith('USDT')) {
                          signalSymbol = signalSymbol.replace('USD', 'USDT');
                        }
                        errorSymbol = signalSymbol;
                      }
                    }
                    
                    if (errorAction === 'UNKNOWN') {
                      errorAction = signal.action || 'UNKNOWN';
                    }
                  }
                }
              } catch (parseError) {
                console.error("Error during error handling:", parseError.message);
              }
              
              // Log the failed trade with all available information
              const tradeInfo = {
                timestamp: new Date().toISOString(),
                symbol: errorSymbol,
                action: errorAction,
                orderSize: errorOrderSize,
                originalAmount: errorOriginalAmount,
                price: null,
                status: 'failed',
                error: error.message
              };
              
              // Additional code to extract price from signal
              try {
                const signalData = process.env.SIGNAL_DATA ? JSON.parse(process.env.SIGNAL_DATA) : null;
                if (signalData) {
                  // Get price from signal if available
                  if (signalData.price) {
                    tradeInfo.price = signalData.price;
                  }
                  
                  // If orderSize is still null, try to get it from signal
                  if (tradeInfo.orderSize === null && signalData.order_size) {
                    tradeInfo.orderSize = signalData.order_size;
                  }
                }
              } catch (e) {
                console.error("Error extracting signal data for failed trade:", e.message);
              }
              
              await logTrade(tradeInfo);
              console.log("Error logged to trade history");
              
              return { error: error.message };
            }
          }
          
          // Helper function to get account assets
          async function getAccountAssets(symbol) {
            const timestamp = Date.now().toString();
            const requestPath = '/api/v2/spot/account/assets';
            const method = 'GET';
            
            // Signature content: timestamp + method + requestPath
            const preHash = timestamp + method.toUpperCase() + requestPath;
            
            // Generate signature
            const signature = crypto.createHmac('sha256', process.env.BITGET_API_SECRET)
              .update(preHash)
              .digest('base64');
            
            const response = await axios({
              method: method,
              url: 'https://api.bitget.com' + requestPath,
              headers: {
                'ACCESS-KEY': process.env.BITGET_API_KEY,
                'ACCESS-SIGN': signature,
                'ACCESS-TIMESTAMP': timestamp,
                'ACCESS-PASSPHRASE': process.env.BITGET_PASSPHRASE,
                'Content-Type': 'application/json'
              },
              timeout: 10000
            });
            
            if (response.data && response.data.code === '00000') {
              // Find the asset for the specific coin (e.g., BTC for BTCUSDT)
              const baseCoin = symbol.replace('USDT', '');
              const asset = response.data.data.find(a => a.coin === baseCoin);
              console.log(`Account assets for ${baseCoin}:`, asset);
              return asset;
            } else {
              throw new Error(`Failed to get account assets: ${response.data ? response.data.msg : 'Unknown error'}`);
            }
          }
          
          // Helper function to log trades
          async function logTrade(tradeInfo) {
            try {
              // Check if the log file exists
              let trades = [];
              if (fs.existsSync(TRADE_LOG_FILE)) {
                // Read existing logs
                const data = fs.readFileSync(TRADE_LOG_FILE, 'utf8');
                try {
                  trades = JSON.parse(data);
                } catch (e) {
                  console.error("Error parsing trade history JSON:", e.message);
                  trades = [];
                }
              }
              
              // Add the new trade
              trades.push(tradeInfo);
              
              // Write back to file
              fs.writeFileSync(TRADE_LOG_FILE, JSON.stringify(trades, null, 2));
              console.log("Trade logged successfully!");
            } catch (error) {
              console.error("Error logging trade:", error.message);
            }
          }
          
          // Helper function to send email notifications
          async function sendNotification(subject, body) {
            if (!NOTIFICATIONS_ENABLED || !NOTIFICATION_EMAIL) {
              console.log("Notifications disabled or email not configured");
              return;
            }
            
            try {
              // Using GitHub Actions to create a notification issue instead of email
              // This is a workaround since we can't easily send emails from GitHub Actions
              
              // Print the notification to the log
              console.log("==== NOTIFICATION ====");
              console.log("Subject:", subject);
              console.log("Body:", body);
              console.log("======================");
            } catch (error) {
              console.error("Error sending notification:", error.message);
            }
          }
          
          // Execute the function
          placeOrder().then(() => {
            console.log("Order process completed");
          }).catch(err => {
            console.error("Unhandled error:", err);
          });
          EOF
          
          node trade.js
          
          # Debug: List files after script execution
          echo "Files in directory after script execution:"
          ls -la
      - name: Commit updated trade history
        run: |
          # Configure git
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          # Check if trade_history.json exists
          if [ -f "trade_history.json" ]; then
            # Add the file and commit
            git add trade_history.json
            git commit -m "Update trade history [skip ci]" || echo "No changes to commit"
            
            # Push changes to the repository
            git push || echo "Failed to push changes"
          else
            echo "trade_history.json not found"
          fi

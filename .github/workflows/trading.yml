name: TradingView-Bitget Bridge

on:
  repository_dispatch:
    types: [trading-signal]
  workflow_dispatch:  # Added for manual testing

jobs:
  place-order:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Process Trading Signal
        env:
          BITGET_API_KEY: ${{ secrets.BITGET_API_KEY }}
          BITGET_API_SECRET: ${{ secrets.BITGET_API_SECRET }}
          BITGET_PASSPHRASE: ${{ secrets.BITGET_PASSPHRASE }}
          SIGNAL_DATA: ${{ toJson(github.event.client_payload) }}
          NOTIFICATIONS_ENABLED: 'true'
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
        run: |
          echo "Received trading signal"
          echo "Symbol: ${{ github.event.client_payload.symbol || 'BTCUSDT' }}"
          echo "Action: ${{ github.event.client_payload.action || 'buy' }}"
          echo "Order size: ${{ github.event.client_payload.order_size || '100' }}"
          
          # Install dependencies
          npm install axios crypto-js nodemailer
          
          # Create and run the trading script
          cat > trade.js << 'EOF'
          const axios = require('axios');
          const crypto = require('crypto');
          const nodemailer = require('nodemailer');
          const fs = require('fs');
          
          // Common scale (decimal places) for cryptocurrencies
          const coinScales = {
            'BTC': 6,
            'ETH': 5,
            'SOL': 4,
            'XRP': 2,
            'ADA': 2,
            'DOT': 3,
            'DOGE': 2,
            'SHIB': 0,
            // Default scale for others
            'DEFAULT': 4
          };
          
          // Trade log file
          const TRADE_LOG_FILE = 'trade_history.json';
          
          // Notification settings
          const NOTIFICATIONS_ENABLED = process.env.NOTIFICATIONS_ENABLED === 'true';
          const NOTIFICATION_EMAIL = process.env.NOTIFICATION_EMAIL;
          
          async function placeOrder() {
            try {
              const apiKey = process.env.BITGET_API_KEY;
              const apiSecret = process.env.BITGET_API_SECRET;
              const passphrase = process.env.BITGET_PASSPHRASE;
              
              // Parse signal data or use defaults for testing
              let signal;
              try {
                signal = process.env.SIGNAL_DATA ? JSON.parse(process.env.SIGNAL_DATA) : {
                  symbol: 'BTCUSDT',
                  action: 'buy',
                  order_size: '100'
                };
              } catch(e) {
                console.log("Error parsing signal data, using defaults:", e.message);
                signal = {
                  symbol: 'BTCUSDT',
                  action: 'buy',
                  order_size: '100'
                };
              }
              
              console.log("Processing signal:", signal);
              
              // Format symbol
              let symbol = signal.symbol || signal.ticker || 'BTCUSDT';
              symbol = symbol.replace('/', '').toUpperCase();
              if (symbol.endsWith('USD') && !symbol.endsWith('USDT')) {
                symbol = symbol.replace('USD', 'USDT');
              }
              
              // Extract base coin name
              const baseCoin = symbol.replace('USDT', '');
              
              // Determine if this is a buy or sell order
              const isBuy = signal.action ? signal.action.toLowerCase() === 'buy' : true;
              
              let orderSize;
              let originalAmount;
              
              if (isBuy) {
                // BUY ORDER: Use the order_size directly as USDT amount
                let investmentAmount = 100; // Default amount in USDT
                
                if (signal.order_size && !isNaN(parseFloat(signal.order_size))) {
                  investmentAmount = parseFloat(signal.order_size);
                }
                
                originalAmount = investmentAmount;
                orderSize = investmentAmount.toFixed(2);
                console.log(`Buy order: Using ${orderSize} USDT to buy ${symbol}`);
                
              } else {
                // For testing, just use a fixed sell amount
                orderSize = "0.001";
                originalAmount = 0.001;
                console.log(`Sell order: Selling ${orderSize} ${baseCoin}`);
              }
              
              // For testing/demo, we'll create a mock response
              const mockResponse = {
                data: {
                  code: '00000',
                  data: {
                    orderId: 'test-' + Date.now()
                  },
                  msg: 'success'
                }
              };
              
              console.log("Mock order placed successfully!");
              console.log("Mock API response:", JSON.stringify(mockResponse.data, null, 2));
              
              // Log the trade
              const tradeInfo = {
                timestamp: new Date().toISOString(),
                symbol: symbol,
                action: isBuy ? 'buy' : 'sell',
                originalAmount: originalAmount,
                orderSize: orderSize,
                orderId: mockResponse.data.data.orderId,
                status: 'success'
              };
              
              await logTrade(tradeInfo);
              console.log("Trade information logged successfully");
              
              return mockResponse.data;
              
            } catch (error) {
              console.error("Error placing order:", error.message);
              // Log the failed trade
              const tradeInfo = {
                timestamp: new Date().toISOString(),
                symbol: error.symbol || 'UNKNOWN',
                action: error.action || 'UNKNOWN',
                status: 'failed',
                error: error.message
              };
              
              await logTrade(tradeInfo);
              console.log("Error logged to trade history");
              
              return { error: error.message };
            }
          }
          
          // Helper function to log trades
          async function logTrade(tradeInfo) {
            try {
              console.log("Attempting to log trade to", TRADE_LOG_FILE);
              // Check if the log file exists
              let trades = [];
              if (fs.existsSync(TRADE_LOG_FILE)) {
                // Read existing logs
                const data = fs.readFileSync(TRADE_LOG_FILE, 'utf8');
                console.log("Existing trade history found");
                try {
                  trades = JSON.parse(data);
                  console.log(`Parsed ${trades.length} existing trades`);
                } catch (e) {
                  console.error("Error parsing trade history JSON:", e.message);
                  trades = [];
                }
              } else {
                console.log("No existing trade history found, creating new file");
              }
              
              // Add the new trade
              trades.push(tradeInfo);
              
              // Write back to file
              fs.writeFileSync(TRADE_LOG_FILE, JSON.stringify(trades, null, 2));
              console.log(`Trade logged successfully! Total trades: ${trades.length}`);
              
              // List directory contents for debugging
              console.log("Files in current directory:");
              fs.readdirSync('./').forEach(file => {
                console.log(" - " + file);
              });
            } catch (error) {
              console.error("Error logging trade:", error.message);
            }
          }
          
          // Execute the function
          placeOrder().then(() => {
            console.log("Order process completed");
          }).catch(err => {
            console.error("Unhandled error:", err);
          });
          EOF
          
          # Run the trading script
          node trade.js
          
          # Debug: List files after script execution
          echo "Files in directory after script execution:"
          ls -la

      - name: Commit updated trade history
        run: |
          # Configure git
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          # Debug: Check if trade_history.json exists
          if [ -f "trade_history.json" ]; then
            echo "trade_history.json found, contents:"
            cat trade_history.json
            
            # Add the file and commit
            git add trade_history.json
            git commit -m "Update trade history [skip ci]" || echo "No changes to commit"
            
            # Push changes to the repository
            git push || echo "Failed to push changes"
          else
            echo "trade_history.json not found, creating sample file"
            echo '[{"timestamp":"2025-03-23T14:00:00.000Z","symbol":"BTCUSDT","action":"buy","originalAmount":100,"orderSize":"100.00","orderId":"sample-order","status":"success"}]' > trade_history.json
            
            git add trade_history.json
            git commit -m "Create sample trade history [skip ci]"
            git push
          fi
